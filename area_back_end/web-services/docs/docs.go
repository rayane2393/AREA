// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/about.json": {
            "get": {
                "description": "Returns detailed information about the client, server, and the services available with their actions and reactions.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "About"
                ],
                "summary": "Get detailed information about the server and services",
                "responses": {
                    "200": {
                        "description": "Detailed information about client and server",
                        "schema": {
                            "$ref": "#/definitions/about.about"
                        }
                    }
                }
            }
        },
        "/create-area": {
            "post": {
                "description": "Create a new AREA with specified parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AREA"
                ],
                "summary": "Create a new AREA",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key",
                        "name": "x-api-key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "bearer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "AREA Creation Data",
                        "name": "area",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AREA_management.AreaCreationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "AREA created successfully",
                        "schema": {
                            "$ref": "#/definitions/AREA_management.AreaCreationSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/AREA_management.AreaCreationErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/delete-area": {
            "post": {
                "description": "Delete an existing AREA by its ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AREA"
                ],
                "summary": "Delete an AREA",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key for access",
                        "name": "x-api-key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer token for user authentication",
                        "name": "bearer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Request body for deleting an AREA",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AREA_management.DeleteAreaRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message: AREA deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "message: invalid API key or Token not valid",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "message: Error while deleting AREA please try again",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/get-area": {
            "post": {
                "description": "Retrieves all the areas associated with the user identified by the provided token.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AREA"
                ],
                "summary": "Get all areas for a user",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer Token",
                        "name": "bearer",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful retrieval of areas",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid API key or bearer token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate user and provide a token upon successful authentication.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key",
                        "name": "x-api-key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User Credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/login.LoginCredentials"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/login.LoginSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid username or password",
                        "schema": {
                            "$ref": "#/definitions/login.LoginErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/login/discord": {
            "post": {
                "description": "Login or register a new user using discord OAuth by providing a discord code.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login with discord OAuth",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key for access control",
                        "name": "x-api-key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer token if the user is already logged in",
                        "name": "Bearer",
                        "in": "header"
                    },
                    {
                        "description": "discord code for OAuth",
                        "name": "code",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/login.Code"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful with token",
                        "schema": {
                            "$ref": "#/definitions/login.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request if the code is not provided or invalid",
                        "schema": {
                            "$ref": "#/definitions/login.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the API key is not valid",
                        "schema": {
                            "$ref": "#/definitions/login.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error when login fails",
                        "schema": {
                            "$ref": "#/definitions/login.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login/github": {
            "post": {
                "description": "Login or register a new user using GitHub OAuth by providing a GitHub code.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login with GitHub OAuth",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API key for access control",
                        "name": "x-api-key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Bearer token if the user is already logged in",
                        "name": "Bearer",
                        "in": "header"
                    },
                    {
                        "description": "GitHub code for OAuth",
                        "name": "code",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/login.Code"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful with token",
                        "schema": {
                            "$ref": "#/definitions/login.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request if the code is not provided or invalid",
                        "schema": {
                            "$ref": "#/definitions/login.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the API key is not valid",
                        "schema": {
                            "$ref": "#/definitions/login.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error when login fails",
                        "schema": {
                            "$ref": "#/definitions/login.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/modify-area": {
            "post": {
                "description": "Modify an existing AREA with new details provided by the user.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AREA"
                ],
                "summary": "Modify an existing AREA",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Bearer token for authorization",
                        "name": "bearer",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "API key for access control",
                        "name": "x-api-key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Area information to be modified",
                        "name": "area",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/AREA_management.Area"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "AREA modified successfully",
                        "schema": {
                            "$ref": "#/definitions/AREA_management.Area"
                        }
                    },
                    "400": {
                        "description": "Bad request when the parameters are not filled",
                        "schema": {
                            "$ref": "#/definitions/AREA_management.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized if the token is not valid or missing",
                        "schema": {
                            "$ref": "#/definitions/AREA_management.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error when AREA modification fails",
                        "schema": {
                            "$ref": "#/definitions/AREA_management.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Register a new user with a username, email, and password.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "User registration",
                "parameters": [
                    {
                        "type": "string",
                        "description": "API Key",
                        "name": "x-api-key",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "User Registration Data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/login.RegisterCredentials"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Account registered successfully",
                        "schema": {
                            "$ref": "#/definitions/login.RegisterSuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/login.RegisterErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "AREA_management.Area": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                },
                "action_name": {
                    "type": "string"
                },
                "color": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "reaction": {
                    "type": "string"
                },
                "reaction_name": {
                    "type": "string"
                },
                "toggled": {
                    "type": "boolean"
                }
            }
        },
        "AREA_management.AreaCreationErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "AREA not valid"
                }
            }
        },
        "AREA_management.AreaCreationRequest": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string",
                    "example": "spotify"
                },
                "action_name": {
                    "type": "string",
                    "example": "new_song"
                },
                "color": {
                    "type": "string",
                    "example": "#FF0000"
                },
                "name": {
                    "type": "string",
                    "example": "agagou"
                },
                "reaction": {
                    "type": "string",
                    "example": "email"
                },
                "reaction_name": {
                    "type": "string",
                    "example": "send_mail"
                },
                "time_execute": {
                    "type": "string",
                    "example": "*"
                },
                "toggled": {
                    "type": "boolean"
                }
            }
        },
        "AREA_management.AreaCreationSuccessResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "message": {
                    "type": "string",
                    "example": "AREA created successfully"
                }
            }
        },
        "AREA_management.DeleteAreaRequest": {
            "type": "object",
            "required": [
                "area_id"
            ],
            "properties": {
                "area_id": {
                    "type": "integer"
                }
            }
        },
        "AREA_management.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "about.about": {
            "type": "object",
            "properties": {
                "client": {
                    "$ref": "#/definitions/about.client"
                },
                "server": {
                    "$ref": "#/definitions/about.server"
                }
            }
        },
        "about.action": {
            "type": "object",
            "properties": {
                "arguments": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "about.client": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string"
                }
            }
        },
        "about.reaction": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "about.server": {
            "type": "object",
            "properties": {
                "current_time": {
                    "type": "string"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/about.service"
                    }
                }
            }
        },
        "about.service": {
            "type": "object",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/about.action"
                    }
                },
                "name": {
                    "type": "string"
                },
                "reactions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/about.reaction"
                    }
                }
            }
        },
        "login.Code": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                }
            }
        },
        "login.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "login.LoginCredentials": {
            "type": "object",
            "properties": {
                "password": {
                    "type": "string",
                    "example": "password123"
                },
                "username": {
                    "type": "string",
                    "example": "user@example.com"
                }
            }
        },
        "login.LoginErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Incorrect credentials"
                }
            }
        },
        "login.LoginResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "login.LoginSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Login successful"
                },
                "token": {
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                }
            }
        },
        "login.RegisterCredentials": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "newuser@example.com"
                },
                "password": {
                    "type": "string",
                    "example": "securePassword123"
                },
                "username": {
                    "type": "string",
                    "example": "newuser"
                }
            }
        },
        "login.RegisterErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Username already taken"
                }
            }
        },
        "login.RegisterSuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Account registered successfully"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
